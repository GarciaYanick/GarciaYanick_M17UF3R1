//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/input/NinjaController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NinjaController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NinjaController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""NinjaController"",
    ""maps"": [
        {
            ""name"": ""MoveControl"",
            ""id"": ""52c1f65b-2942-482f-89c7-b677af13eada"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""75bf7f66-2079-4aa7-b6ab-61bc219cd4d1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""da1f383b-83ab-40bc-9b51-6535df3609e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f532f59e-83f8-4121-856b-0c7242d6ffd2"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d42aa3a6-48ff-4e92-a64d-fa1dca0d8001"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b5cec355-ef93-4775-a5e5-2c5502ac758e"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""79244836-dfad-4217-9529-5fb7f1ff11c4"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MoveControl
        m_MoveControl = asset.FindActionMap("MoveControl", throwIfNotFound: true);
        m_MoveControl_Move = m_MoveControl.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MoveControl
    private readonly InputActionMap m_MoveControl;
    private List<IMoveControlActions> m_MoveControlActionsCallbackInterfaces = new List<IMoveControlActions>();
    private readonly InputAction m_MoveControl_Move;
    public struct MoveControlActions
    {
        private @NinjaController m_Wrapper;
        public MoveControlActions(@NinjaController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MoveControl_Move;
        public InputActionMap Get() { return m_Wrapper.m_MoveControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveControlActions set) { return set.Get(); }
        public void AddCallbacks(IMoveControlActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveControlActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMoveControlActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMoveControlActions instance)
        {
            if (m_Wrapper.m_MoveControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveControlActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveControlActions @MoveControl => new MoveControlActions(this);
    public interface IMoveControlActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
